---
layout:     post
title:      "CommonJS浅谈"
subtitle:   "CommonJS浅谈"
date:       2021-11-09
author:     "Lyb"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - 前端开发
    - CommonJS
---
### CommonJs 浅谈

1.CommonJs规定每个文件为一个模块，存在自己的作用域，在每一个作用域中的变量，方法，类，都是私有

2.CommonJs规定，每一个模块下都存在一个module变量，这个module变量代表当前对象，这个对象有一个exports属性（ 即module.exports）是对外的一个接口，导出的是一个对象！！！
所以说每个js文件都存在一个module对象

````
eg: exports.js

    let x = 5;
    let funx = (a,b) => {
        console.log(a+b)
    }
    module.exports.x = x
    module.exports.funx = funx
````
````
eg: require.js

    console.log(module)
输出：

    Module {
    id: '.',  
    exports: {},
    parent: null,
    filename: 'E:\\lyb\\我的博客\\Richard-liyebin.github.io\\_posts\\2.js',
    loaded: false,
    children:
    [ Module {
        id: 'E:\\lyb\\我的博客\\Richard-liyebin.github.io\\_posts\\1.js',
        exports: [Object],
        parent: [Circular],
        filename: 'E:\\lyb\\我的博客\\Richard-liyebin.github.io\\_posts\\1.js',
        loaded: true,
        children: [],
        paths: [Array] } ],
    paths:
    [ 'E:\\lyb\\我的博客\\Richard-liyebin.github.io\\_posts\\node_modules',
        'E:\\lyb\\我的博客\\Richard-liyebin.github.io\\node_modules',
        'E:\\lyb\\我的博客\\node_modules',
        'E:\\lyb\\node_modules',
        'E:\\node_modules' ] 
    }

    module.id 模块的识别符，通常是带有绝对路径的模块文件名。
    module.filename 模块的文件名，带有绝对路径。
    module.loaded 返回一个布尔值，表示模块是否已经完成加载。
    module.parent 返回一个对象，表示调用该模块的模块。
    module.children 返回一个数组，表示该模块要用到的其他模块。
    module.exports 表示模块对外输出的值。
````


3.在每个module模块中，Node为每个模块提供一个exports变量，指向module.exports。这等同在每个模块头部，有一行这样的命令。（let exports = module.exports）

````
eg: exports.js

    let x = 5;
    let funx = (a,b) => {
        console.log(a+b)
    }
    module.exports.x = x
    module.exports.funx = funx

    也可以写成
    exports.x = x
    exports.funx = funx

    但请注意，不要写成exports = x,这样的话，相当于exports就不指向module.exports了，指向x去了，跟它无关了就。

 eg: require.js   

    let myrequire = require('./exports.js)
    console.log(myrequire)
    输出：{
        x:5,
        funx:()=>{
            ....
        }
    }
````

4.require 默认加载的是js文件，后缀名不写默认为.js文件

5.根据require的参数不同，require会去加载不同的文件，以及引用的顺序也有差别

````
    eg: example.js
    let a = require('/src/home/foo.js')
    let b = require('./foo.js')
    let c = require('foo.js')

    a: 绝对路径，以'/'开头，加载的是一个绝对路径下的模块文件，以src开始向下找
    b: 相对路径，以'./或../'开头，加载的是相对路径下的模块文件，以当前文件开始，向上一级或下一级找
    c: 如果直接require的一个文件名，则表示加载的是一个核心模块，（位于node系统的目录中或者在各级脚本的mode_modules目录中的已安装模块）
    顺序：
    先从node系统模块下找
    /home/local/lib/node/foo.js
    然后从当前文件夹下的node_modules下面找
    /home/node_modules/bar.js
    再从上一级一直到最外层的node_modules下找
    /node_modules/bar.js
    d: 如果参数字符串不以“./“或”/“开头，而且是一个路径，比如require('example-module/path/to/file')，则将先找到example-module的位置，然后再以它为参数，找到后续路径。

    e:如果指定的模块文件没有发现，Node会尝试为文件名添加.js、.json、.node后，再去搜索。.js件会以文本格式的JavaScript脚本文件解析，.json文件会以JSON格式的文本文件解析，.node文件会以编译后的二进制文件解析。

    f:如果想得到require命令加载的确切文件名，使用require.resolve()方法。
````

6.第一次require时，会对目标模块进行缓存，下次再引用该模块会直接从缓存中读取

7.一旦require函数准备完毕，整个所要加载的脚本内容，就被放到一个新的函数之中，这样可以避免污染全局环境。该函数的参数包括require、module、exports，以及其他一些参数。

````
(function (exports, require, module, __filename, __dirname) {
  // YOUR CODE INJECTED HERE!
});
````