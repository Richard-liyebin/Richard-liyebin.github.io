---
layout:     post
title:      "Git 团队开发流程"
subtitle:   "团队开发随笔"
date:       2020-11-08
author:     "Lyb"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - 前端开发
    - Git
---

Git 团队开发流程
----
#### （仅针对于个人理解，如有其他更好的方法，也不接受反驳！O(∩_∩)O）

###  前言 
#### 团队开发和个人开发的不同点在于，团队开发最大的特点就是--协同性，一个项目需要不同的人进行同时开发，而不是依次进行开发。大大提升了效率，但是团队开发在效率高的同时，也会伴随着很多的问题出现，比如多人同时开发，我也在提交，你也在提交，提交冲突了怎么办；各自有各自的命名习惯，命名冲突了又怎么办；当我改好我的代码时，可能隔几天时间，我想提交一个新的版本，但是这时候别人的代码早就改好了，然而我不知道，我提交上去了覆盖了怎么办，都是泪！所以团队开发伴随着很多很多的注意事项和问题，我在这里把我自己对于团队开发的理解和自己的流程，写在这里。

### 一.拉取仓库，注意分支
#### 1.在远端github仓库中，dev分支下创建出属于自己的分支，记住一定是在dev分支下创建的，默认是master的，所以一定注意。
#### 2.从github的仓库地址，clone下项目地址，https或ssh均可，无论是哪个分支，都可以。因为后期可以直接本地修改链接到对应分支上，只需要确认我们远端的对应分支是从dev分支创建出来的就好
（一般来说，master分支是不会用于发布开发版本的，也就是说，master分支上的代码一般是不会去修改的，而是用来发布测试的时候，才会去动。而dev版本的话一般用于团队一起协作开发，一起提交，审核等等）
#### 3.在github本地clone的仓库中，先去更新git仓库最新的分支（git fetch）
#### 4.分支更新后，在本地创建自己的分支并连接起来(git checkout -b lyb origin/lyb) 这一步很重要，意思是我们本地创建一个lyb分支，去连接我们的远端分支lyb，这个远端分支就是我们刚从远端仓库dev下创建的分支
#### 4.修改的过程中，记住，代码建议多次提交。但如果是自己单独的功能，建议多次单独提交，不要与统一的功能，变化性强的功能一起提交，否则的话，如果代码需要回退，你的单独修改，也就不存在了
#### 5.特别注意，每次写完功能，先提交，先(git add .) ,(git commit -m 'xxx') ,再拉取最新分支，（git fetch），再拉取最新代码（git pull）,如果出现冲突，马上用可视化工具 vscode进行调试，其他工具也可
#### 6.push以后,要记得发起pull request，然后去让自己的partner一起pair你的代码
#### 7.当所有人都approve以后，才可以进行merge

#### 8.feat-xxxx：用于每个贡献者开发新功能。 username / fix-xxxx：每个贡献者的错误修复。