---
layout:     post
title:      "JS基础"
subtitle:   "2.js基本概念"
date:       2020-11-08
author:     "Lyb"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - 前端开发
    - JavaScript
---
1. js中变量，函数，属性，函数参数等命名规范：第一个字符必须是字母，下划线，$.不可以为数字

2. 语句和表达式的区别在于，表达式始终会返回一个结果集，而语句可以带分号，并且是一个行为的描述；

那么什么是js表达式，与js语句有什么区别？

                     // 1.表达式
                     //  表达式都会有一个值，例如 a , a+b ,如果我们用一个变量去接住它，这个变量能接到值，那么就是表达式，否则，就不是。
                     //  const x = a   
                     //  const x = a+b   
                     //  const x = fun() 
                     //  const x = arr.map() 
                     //  const x = function a(){} 
                     //这些x都可以接到值，函数中x接到的是返回值，哪怕不写，都默认return undfined，说明a a+b fun() 都是表达式

                     // 2.语句
                     // if(){}
                     // for(){}
                     // switch(){}

3. 变量未赋值时，声明时默认值为undefined。全局变量如果不销毁会一直存在，局部变量在使用区域退出时就会被销毁

4. 注意，变量未声明但是直接使用时，会默认为一个新的全局变量，自动创建。但是在严格模式下会报错，因为
严格模式不可以给未定义的变量赋值

5. 字面量是一个常量，是一个由表达式定义的常量，通过一定字词组成的表达式定义的常量，而表达式，一定会有一个值产生，所以字面量一定是有值的
````
  function(){
    message = 'hello world'
  }
  此时的message在局部没有，去全局找也没有，但会自动默认为全局变量，依然有效
````

6. 数据类型
  >基本数据类型：string number boolean null undefined

  >引用数据类型：object （包括array object，new的实例对象等）
  ````
  1.number: number类型

    1.1 isNAN() 方法，用于判断一个值转化为数值后是不是一个非数值（NAN）
    举几个典型例子：
    isNAN(10) //false
    isNAN('10') //false 因为数值字符串会被转化成数值
    isNAN(abc) //true
    isNAN(true) //false 转换为1
    isNAN(NAN) //true
    isNAN(undefined) //true 
    isNAN(null) //false
    
    注意了，null转换为数值是0，undefined转换为数值是NaN
    
    1.2.Number() 方法,用于把一个值转化为数值，如果转化不了的返回非数值NaN
      


 
  2.string: string类型
    2.1 有一个toString()方法，可以把除了undefined和null的值转为一个字符串，undefined和null不行
    因为它没有这个方法
    2.2 有一个String(val)方法，不管是null还是undefined都可以使用

  3.boolean: boolean类型
    3.1有一个方法 Boolean（）可以直接转换任意值为布尔值
    还有一个方法也可以做到 !!val ,这是比较装X的做法了，hhh

  4.undefined: undefined类型 

    4.1. 包括undefined本身和定义以后未赋值的变量，（其实除了严格模式下，如果不给一个变量
    声明，直接用typeof也会返回一个未声明过的变量也会返回undefined，但是最好不要那样做）

    4.2. 因为undefined派生于null 所以 undefined == null 返回true 。由于类型不同 undefined === null 返回false
    如果需要定义一个空对象，最好把对象先定义为null。


  5.function: function类型


  6.object: object array 

  ````




6. typeof 可以检测的数据类型 number string boolean undefined function object


    number: typeof检测number类型返回number

    string: typeof检测string类型返回string


    boolean: typeof检测boolean类型返回boolean

    undefined: typeof检测undefined类型（undefined和未赋值变量等等）返回undefined 


    function: typeof检测function类型（函数）返回function


    object: typeof检测 object array （对象，数组，new的实例对象等）返回object


  > 注意补充：当变量未声明和已声明未赋值是两个不同的概念,变量未声明时，console会报错，但typeof与已声明未赋值一样会返回undefined

    例如：
    let name;

    console.log(typeof (name)) //undefined
    console.log(typeof (age)) //undefined
    
    console.log(name) //undefined
    console.log(age) //Uncaught ReferenceError: age is not defined




 7. 转换为布尔值为false的有 ' '空字符串 null undefined NaN 0 


 8. a++ 此操作符不只是相当于a+1,a也已经被改变，注意即可

 9. "&&" "||" "&" "|"区别：&&和||是逻辑运算符，&和|是位运算符。&&和||符合逻辑短路的原则就不多解释，
 而&和|的计算方法，先转换为二进制，然后每一位对应，看对应的位置是相同还是不同，例如& ，相同为1，不同为0
 分别写在下面，最后得出结果！

 10. 逻辑短路：
 ````
  
 1.&& : 如果第一个为false，返回第一个为false的值，否则返回最后一个的值
 eg:  1 && 2 //2     0 && 1 //0    1 && 0 && 3 //3


 2.|| ：如果第一个为true，则返回第一个的值，否则返回第一个为true的值 ,如果都为false，则返回最后一个的值
 eg: 1 || 2 //1      0 || 1 //1    0 || 1 || 2 //1

 ````

 

11. 运算符

12. 语句
````
  1. if语句
  2. do-while语句
  3. while语句
````

13. 函数
````
    1.函数定义时不管你定义了多少个参数，在使用时你都可以传一个，多个或者不传，
    函数不会因此报错，因为ECMAscript的函数参数其实是一个数组，把整个参数数组传入
    可以通过arguments对象来访问这个参数

    2.函数重载其实也是根据传入参数的不同，来执行不同的方法。在严格模式下，arguments对象被禁止
  
    3.在fun(num1,num2)函数中arguments[0]其实和num1的值相等，同步。但不代表他们是同一个东西，argument[0]
    和num1的内存空间是不同的，值相同而已

    4.所有未指定返回值的函数返回的都是undefined，所以没有返回值的函数执行时值为undefined

````

14. return 和 break 区别在哪
````
  1.return 用于表示函数的返回结果，return语句就是用于指定函数返回的值。
  return语句应用范围只能出现在函数体内，出现在代码中的其他任何地方都会造成语法错误！

  2.break 由于它是用来退出循环或者switch语句，所以只有当它出现在这些语句时，这种形式的break语句才是合法的。
  注意。foreach是不支持break的
````


15. \转义  \n换行  \t tab
````
    let a = '今天我的\'朋友\'要去吃饭' 
    console.log(a)  //  今天我的'朋友'要去吃饭

````