---
layout:     post
title:      "Vue脚手架搭建"
subtitle:   "自己搭建脚手架"
date:        2020-01-21
author:     "Lyb"
header-img: "img/post-bg-unix-linux.jpg"
tags:
    - 前端开发
    - Vue
    - 脚手架
---

## Vue工程化搭建
 + ### 1 首先初始化一个项目
    > npm init  该命令会生成一个package.json文件,里面包含着我们项目的各种依赖和配置
    ````
    {
        "name": "manual-project-setup",
        "version": "1.0.0",
        "description": "do not use vue-cli to create a vue Program",
        "main": "index.js",
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
        },
        "author": "Richard",
        "license": "ISC",
    }
    这是我们项目的基本信息
    ````

+ ### 2 初始化项目目录src，入口文件index.js,并且创建我们vue工程的app.vue
    > src文件夹下有我们的index.js入口文件和我们的App.vue主页
    ````

    //这是工程的入口文件
    import Vue from 'vue';
    import App from './app.vue';

    const root = document.createElement('div')
    document.body.appendChild(root)
    
    //mount就是讲我们的App挂载到root这样一个根节点中去
    new Vue({
    render: (h) => h(App)
    }).$mount(root)
    ````
+ ### 3 初始化webpack.config.js

    ````
    const path  = require("path") //1.用于处理路径，是node.js里面的包
    const VueLoaderPlugin = require('vue-loader/lib/plugin');//4.Vue-loader在15.*之后的版本都是 vue-loader的使用都是需要伴生 VueLoaderPlugin的
    //2._dirname表示文件相当于工程的路径
    //path.join的作用是用来拼接我们的路径，_dirname的文件夹此时就是我们config文件的绝对路径，再与后面的文件名或
    //文件夹名称组合起来，可以找到入口文件，和找到输出文件夹
    module.exports = {
        entry : path.join(__dirname,"src/index.js"),
        output: {
            filename:'bundle.js',
            path:path.join(__dirname,'dist')
        },
        plugins: [
            // make sure to include the plugin for the magic   
            new VueLoaderPlugin()
        ],
        mode:'none',    
        module:{
            rules:[
                { //3.通过设置vue-loader让webpack识别.vue后缀的文件
                    test:/.vue$/,
                    loader:'vue-loader'
                },
                {
                    test:/.css$/,
                    use:[
                        'style-loader',
                        'css-loader'
                    ]
                },
                {
                    test:/.less$/,
                    use:[
                        'style-loader',
                        'css-loader',
                        'less-loader'
                    ]
                }
            ]
        }
    }
    这只是一个示例，并没有安装完所有的模块
    ````
+ ### 4.安装相应的组件
    > Vue的 vue vue-loader vue-template-compiler 

    > Webpack的 webpack webpack-cli 

    > Css的 style-loader css-loader 

    > Css预处理 less less-loader sass sass-loader

    > HTML的  html-webpack-plugin
    
    ````
    webpack.config.js文件的头部将它require进来
    const HTMLPlugin = require('html-webpack-plugin')

    并且引入插件里
    plugins[
        new HTMLPlugin()
    ]

    ````

+ ### 5.webpack打包指令
    > 在package.json里的script配置打包指令
    ````
    "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build": "webpack --config webpack.config.js"
  },
    ````


+ ### 6.服务器热更新和自动弹出浏览器 
    > npm install webpack-dev-server 插件的安装  

    ````
    "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "build": "webpack --config webpack.config.js",
        "dev": "webpack-dev-server --config webpack.config.js"
        加上这一句
    }

    ````

+ ### 7.在不同环境下开发，使用变量来区分
    > npm install cross-env 插件

    ````
    package.json中：

     "scripts": {
     "test": "echo \"Error: no test specified\" && exit 1",
     "build": "cross-env NODE_ENV=production webpack --config webpack.config.js",
     "dev": "cross-env NODE_ENV=development webpack-dev-server --config webpack.config.js"
     }

    webpack.config.js中：
    const webpack = require('webpack')
    const isDev = process.env.NODE_ENV === 'development';
    
    if(isDev){
    devServer = {
        port: 8000,
        host: '0.0.0.0',
        overlay: {
        erros: true,
        },
        open:true, //自动打开浏览器
        hot:true //无刷新重新渲染
    }
    }
    plugins: [
    //添加
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: isDev ? '"development"' : '"production"'
      }
    }),
    new VueLoaderPlugin(),
    new HTMLPlugin()
    ]
    ````


### 总结

1. >先构建一个初始化项目 npm init
2. >构建出基本文件 src app.vue index.js webpack.config.js等等
3. >安装基本模块 vue vue-loader webpack webpack-cli css js html 等等模块
4. >设置打包script指令，包括开发环境和生产环境的不同，详细见前面
5. >